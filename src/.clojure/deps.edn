;;; clojure -Ttools list
;;; clojure -Ttools install-latest
;;; clojure -Ttools install-latest :tool antq
;;; clojure -Ttools install-latest :lib com.github.liquidz/antq :as antq
;;;
;;; clojure -A:deps -Ttools help/dir
;;; clojure -A:deps -Tantq help/doc
;;; clojure -X:deps help/doc :ns help
;;; clojure -X:deps:my-alias help/dir
;;;
;;; clojure -Sdeps '{:deps {com.syntereen/syntereen-templates {:local/root "/Users/dorab/Projects/syntereen-templates"}}}' -Tnew create :template com.syntereen.templates/app :name myusername/mynewproject
;;;
;;; neil new template ecorp/clj-template
;;; neil new --local/root clj-template ecorp/clj-template ecorp/clj-project
{
 :aliases {
           ;; Different clojure versions:

           :1.8 {:override-deps {org.clojure/clojure {:mvn/version "1.8.0"}}}
           :1.11 {:override-deps {org.clojure/clojure {:mvn/version "1.11.4"}}}
           :1.12 {:override-deps {org.clojure/clojure {:mvn/version "1.12.0"}}}
           :master {:override-deps {org.clojure/clojure {:mvn/version "1.12.1-master-SNAPSHOT"}}}

           ;; testing and debugging tools:

           :nop {:extra-deps {org.slf4j/slf4j-nop {:mvn/version "RELEASE"}}}
           :test {:extra-paths ["test" "src/test/clojure"]
                  :extra-deps {org.clojure/test.check {:mvn/version "RELEASE"}}}
           ;; - see https://github.com/cognitect-labs/test-runner
           ;; - run your tests: clj -A:test:runner
           :runner {:extra-deps {com.cognitect/test-runner
                                 {:git/url "https://github.com/cognitect-labs/test-runner"
                                  :sha "3cb0a9daf1cb746259dc8309b218f9211ad3b33b"}}
                    :main-opts ["-m" "cognitect.test-runner"
                                "-d" "test"
                                "-d" "src/test/clojure"]}
           ;; Linter see https://github.com/jonase/eastwood#running-eastwood-in-a-repl
           :eastwood {:extra-deps {jonase/eastwood {:mvn/version "RELEASE"}}
                      ;; :extra-paths ["test" "src/test/clojure"]
                      ;; :main-opts ["-m" "eastwood.lint" "{:source-paths,[\"src\"],:test-paths,[\"test\"]}"]}
                      :main-opts ["-m" "eastwood.lint" {:source-paths ["src"]}]}
           ;; clj-kondo linter
           :clj-kondo {:extra-deps {clj-kondo/clj-kondo {:mvn/version "RELEASE"}}
                       :main-opts ["-m" "clj-kondo.main"]}
           ;; Checks for warnings and errors - see https://github.com/athos/clj-check
           ;; clj -M:check
           :check {:extra-deps {io.github.athos/clj-check
                                {:git/tag "0.1.0" :git/sha "0ca84df"}}
                   :main-opts ["-m" "clj-check.check"]}
           ;; - see https://github.com/clojure-expectations/expectations
           ;; - run your expectations: clj -A:test:expect:runner
           :expect {:extra-deps {expectations/expectations {:mvn/version "RELEASE"}}}
           ;; Data visualization
           :portal {djblue/portal {:mvn/version "RELEASE"}}
           ;; Benchmarking
           :bench {:extra-deps {criterium/criterium {:mvn/version "RELEASE"}}}
           ;; Memeory usage checking
           ;; - see https://github.com/clojure-goes-fast/clj-memory-meter
           ;; - (require '[clj-memory-meter.core :as mm])
           ;; - (mm/measure (your-expression))
           :measure {:extra-deps {com.clojure-goes-fast/clj-memory-meter {:mvn/version "RELEASE"}}}

           ;; Development tools

           ;; If installed and used as a tool, it gives an (ignorable) exception if outdated deps exist
           ;; Alternatively, use it without a tool.
           :outdated {:deps {org.clojure/clojure {:mvn/version "1.12.0"}
                             antq/antq {:mvn/version "RELEASE"}
                             org.slf4j/slf4j-nop {:mvn/version "RELEASE"}}
                      :main-opts ["-m" "antq.core"]}
           ;; Convert a lein project to deps.edn project.
           :depify {:extra-deps {depify/depify {:git/url "https://github.com/hagmonk/depify"
                                                :sha     "04329744872890711dbba8939a16e9987dd33bb3"}}
                    :main-opts  ["-m" "depify.project"]}
           ;; To be filled in by the project deps.edn.
           ;; Called by cider when starting a nrepl.
           :dev {}

           ;; For clojure-mcp
           :clojure-mcp {:deps {org.slf4j/slf4j-nop {:mvn/version "2.0.16"} ;; Required for stdio server
                                com.bhauman/clojure-mcp {:git/url "https://github.com/bhauman/clojure-mcp.git"
                                                         :git/tag "v0.1.8-alpha"
                                                         :git/sha "457f197"}}
                         :exec-fn clojure-mcp.main/start-mcp-server
                         #_#_:exec-args {:port 7888}}
           ;; for clojure-mcp
           :nrepl {:deps {nrepl/nrepl {:mvn/version "RELEASE"}
                          org.slf4j/slf4j-simple {:mvn/version "2.0.17"}}
                   :paths ["src" "resources" "test"]
                   :jvm-opts ["-Djdk.attach.allowAttachSelf"]
                   ;; add --port nnnn for each project
                   :main-opts ["-m" "nrepl.cmdline"] }

           ;; For Java9+ to handle modules
           :java9 {:jvm-opts ["--add-opens" "java.base/jdk.internal.misc=ALL-UNNAMED"]}

           }}
