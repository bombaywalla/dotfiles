{
 :aliases {
           ;; Different clojure versions:
           :1.8 {:override-deps {org.clojure/clojure {:mvn/version "1.8.0"}}}
           :1.10 {:override-deps {org.clojure/clojure {:mvn/version "1.10.1"}}}
           :master {:override-deps {org.clojure/clojure {:mvn/version "1.11.0-master-SNAPSHOT"}}}

           ;; testing and debugging tools:
           :test {:extra-paths ["test" "src/test/clojure"]
                  :extra-deps {org.clojure/test.check {:mvn/version "RELEASE"}}}
           ;; - see https://github.com/cognitect-labs/test-runner
           ;; - run your tests: clj -A:test:runner
           :runner {:extra-deps {com.cognitect/test-runner
                                 {:git/url "https://github.com/cognitect-labs/test-runner"
                                  :sha "3cb0a9daf1cb746259dc8309b218f9211ad3b33b"}}
                    :main-opts ["-m" "cognitect.test-runner"
                                "-d" "test"
                                "-d" "src/test/clojure"]}
           ;; see https://github.com/jonase/eastwood#running-eastwood-in-a-repl
           :eastwood {:extra-deps {jonase/eastwood {:mvn/version "RELEASE"}}
                      ;; :extra-paths ["test" "src/test/clojure"]
                      ;; :main-opts ["-m" "eastwood.lint" "{:source-paths,[\"src\"],:test-paths,[\"test\"]}"]}
                      :main-opts ["-m" "eastwood.lint" {:source-paths ["src"]}]}

           ;; - see https://github.com/clojure-expectations/expectations
           ;; - run your expectations: clj -A:test:expect:runner
           :expect {:extra-deps {expectations/expectations {:mvn/version "RELEASE"}}}
           ;; - see https://github.com/hugoduncan/criterium/
           ;; - (require '[criterium.core :refer [bench]])
           ;; - (bench (your-expression))
           :bench {:extra-deps {criterium/criterium {:mvn/version "RELEASE"}}}
           ;; - see https://github.com/clojure-goes-fast/clj-memory-meter
           ;; - (require '[clj-memory-meter.core :as mm])
           ;; - (mm/measure (your-expression))
           :measure {:extra-deps {com.clojure-goes-fast/clj-memory-meter {:mvn/version "RELEASE"}}}
           ;; - see https://github.com/liquidz/antq
           :outdated {:extra-deps {antq/antq {:mvn/version "RELEASE"}}
                      :main-opts ["-m" "antq.core"]}
           ;; To be filled in by the project deps.edn.
           ;; Called by cider when starting a nrepl.
           :dev {}

           ;; For Java9+
           :java9 {:jvm-opts ["--add-opens" "java.base/jdk.internal.misc=ALL-UNNAMED"]}

           ;; clj-kondo linter
           :clj-kondo {:extra-deps {clj-kondo/clj-kondo {:mvn/version "RELEASE"}}
                       :main-opts ["-m" "clj-kondo.main"]}


           ;; project creation from templates:
           ;; - see https://github.com/seancorfield/clj-new
           ;; - create an application project:
           ;;   - clj -X:new create :template app :name myname/myapp
           ;;   - cd myapp
           ;;   - clj -M -m myname.myapp # run it!
           ;;   - clj -M:test:runner # run the tests!
           ;; - create a library project:
           ;;   - clj -X:new create :template lib :name myname/my-cool-lib
           ;;   - cd my-cool-lib
           ;;   - clj -M:test:runner # run the tests!
           :new {:extra-deps {seancorfield/clj-new {:mvn/version "RELEASE"}}
                 :ns-default clj-new
                 :exec-args {:template "lib"} ; default
                 }
           :new-app {:extra-deps {seancorfield/clj-new {:mvn/version "RELEASE"}}
                     :exec-fn clj-new/create
                     :exec-args {:template "app"}
                     }
           :new-lib {:extra-deps {seancorfield/clj-new {:mvn/version "RELEASE"}}
                     :exec-fn clj-new/create
                     :exec-args {:template "lib"}
                     }

           ;; uberjar building
           ;; - see https://github.com/seancorfield/depstar for a minimalist approach:
           ;;   - clj -X:uberjar :jar '"result.jar"'
           ;; - to run it:
           ;;   - java -cp result.jar clojure.main -m mymain.namespace
           ;; - build a library JAR:
           ;;   - clj -X:jar :jar '"result-lib.jar"'
           :uberjar {:replace-deps {seancorfield/depstar {:mvn/version "RELEASE"}}
                     :exec-fn hf.depstar/uberjar}
           :jar {:replace-deps {seancorfield/depstar {:mvn/version "RELEASE"}}
                 :exec-fn hf.depstar/jar}

           ;; Stuff related to makeing a new release
           ;; None of this works as well as I'd like.
           :garamond {:main-opts ["-m" "garamond.main"]
                      :extra-deps {com.workframe/garamond {:mvn/version "0.4.0"}}}
           ;;
           :metav {:extra-deps {metav/metav {:mvn/version "1.6.7"}}}
           :artifact-name {:extra-deps {metav/metav {:mvn/version "1.6.7"}}
                           :main-opts ["-m" "metav.display"]}
           :release {:extra-deps {metav/metav {:mvn/version "1.6.7"}}
                     :main-opts ["-m" "metav.release"]}
           :spit     {:extra-deps {metav/metav {:mvn/version "1.6.7"}}
                      :main-opts ["-m" "metav.spit"
                                  "--output-dir" "src"
                                  "--namespace" "yournamespace.meta"
                                  "--formats" "clj"]}
           ;; Deploy to clojars
           ;; env CLOJARS_USERNAME=username CLOJARS_PASSWORD=password clj -X:deploy :artifact /path/to/jar
           :deploy {:extra-deps {slipset/deps-deploy {:mvn/version "RELEASE"}}
                    :exec-fn deps-deploy.deps-deploy/deploy
                    :exec-args {:installer :remote :sign-releases? false}}
           ;; Deploy to ~/.m2
           ;; clj -X:install :artifact /path/to/jar
           :install {:extra-deps {slipset/deps-deploy {:mvn/version "RELEASE"}}
                    :exec-fn deps-deploy.deps-deploy/deploy
                    :exec-args {:installer :local :sign-releases? false}}

           :pne {:main-opts,["-e","(defmacro,$,[&,body],(list,'while,(list,'when-let,'[$_,(read-line)],(let,[v,(gensym)],(list,'let,(vector,v,(list*,'do,body)),(list,'println,v))),'$_)))"]}
           }
 }
